var _user$project$Gameboard$getPhaseAsString = function (gb) {
	var _p0 = gb.phase;
	switch (_p0.ctor) {
		case 'Build':
			return 'Build';
		case 'Move':
			return 'Move';
		default:
			return 'Retreat';
	}
};
var _user$project$Gameboard$getTurnAsString = function (gb) {
	var _p1 = gb.turn;
	if (_p1.ctor === '[]') {
		return _elm_lang$core$Native_Utils.crashCase(
			'Gameboard',
			{
				start: {line: 171, column: 22},
				end: {line: 173, column: 30}
			},
			_p1)('no empire??');
	} else {
		return _user$project$GameMap$getEmpireString(_p1._0);
	}
};
var _user$project$Gameboard$applyBuildDirectives = F2(
	function (bds, gb) {
		return gb;
	});
var _user$project$Gameboard$applyRetreats = F2(
	function (rinfo, gb) {
		return gb;
	});
var _user$project$Gameboard$applyMoveDirectives = F2(
	function (mds, gb) {
		return {
			ctor: '_Tuple2',
			_0: gb,
			_1: {ctor: '[]'}
		};
	});
var _user$project$Gameboard$refreshTurn = function (gb) {
	return _elm_lang$core$Native_Utils.update(
		gb,
		{turn: gb.turnOrder});
};
var _user$project$Gameboard$addDisbandDirective = function (_p3) {
	var _p4 = _p3;
	return A2(_user$project$Map$set, _p4._0, _p4._1);
};
var _user$project$Gameboard$addBuildDirective = function (_p5) {
	var _p6 = _p5;
	return A2(_user$project$Map$set, _p6._0, _p6._1);
};
var _user$project$Gameboard$updateRetreatDirectives = function (_p7) {
	var _p8 = _p7;
	return A2(_user$project$Map$set, _p8._0, _p8._1);
};
var _user$project$Gameboard$updateMoveDirectives = function (_p9) {
	var _p10 = _p9;
	return A2(_user$project$Map$set, _p10._0, _p10._1);
};
var _user$project$Gameboard$Gameboard = F7(
	function (a, b, c, d, e, f, g) {
		return {gameMap: a, turnOrder: b, date: c, phase: d, turn: e, pieces: f, supplyCenters: g};
	});
var _user$project$Gameboard$BuildInfo = F2(
	function (a, b) {
		return {buildDirectives: a, disbandDirectives: b};
	});
var _user$project$Gameboard$RetreatInfo = F2(
	function (a, b) {
		return {retreatDirectives: a, retreatingPieces: b};
	});
var _user$project$Gameboard$Autumn = function (a) {
	return {ctor: 'Autumn', _0: a};
};
var _user$project$Gameboard$Spring = function (a) {
	return {ctor: 'Spring', _0: a};
};
var _user$project$Gameboard$Build = function (a) {
	return {ctor: 'Build', _0: a};
};
var _user$project$Gameboard$freshBuildPhase = function (gb) {
	var newPhase = _user$project$Gameboard$Build(
		{buildDirectives: _user$project$Map$empty, disbandDirectives: _user$project$Map$empty});
	return _user$project$Gameboard$refreshTurn(
		_elm_lang$core$Native_Utils.update(
			gb,
			{phase: newPhase}));
};
var _user$project$Gameboard$Retreat = function (a) {
	return {ctor: 'Retreat', _0: a};
};
var _user$project$Gameboard$freshRetreatPhase = function (_p11) {
	var _p12 = _p11;
	var newPhase = _user$project$Gameboard$Retreat(
		{retreatDirectives: _user$project$Map$empty, retreatingPieces: _p12._1});
	return _user$project$Gameboard$refreshTurn(
		_elm_lang$core$Native_Utils.update(
			_p12._0,
			{phase: newPhase}));
};
var _user$project$Gameboard$Move = function (a) {
	return {ctor: 'Move', _0: a};
};
var _user$project$Gameboard$freshGameboard = function () {
	var supplyCenters = _user$project$Map$empty;
	var phase = _user$project$Gameboard$Move(_user$project$Map$empty);
	var date = _user$project$Gameboard$Spring(1900);
	var gmd = _user$project$Europe$gameMapData;
	var gameMap = _user$project$GameMap$convert(gmd);
	var turnOrder = _user$project$GameMap$getEmpireTurnOrder(gmd);
	var turn = turnOrder;
	var pieces = A2(_user$project$GameMap$getStartingPieces, gameMap, gmd);
	return {gameMap: gameMap, turnOrder: turnOrder, date: date, phase: phase, turn: turn, pieces: pieces, supplyCenters: supplyCenters};
}();
var _user$project$Gameboard$freshMovePhase = function (gb) {
	return _user$project$Gameboard$refreshTurn(
		_elm_lang$core$Native_Utils.update(
			gb,
			{
				phase: _user$project$Gameboard$Move(_user$project$Map$empty)
			}));
};
var _user$project$Gameboard$turnTheClock = function (gb) {
	var _p13 = gb.date;
	if (_p13.ctor === 'Spring') {
		return _user$project$Gameboard$freshMovePhase(
			_elm_lang$core$Native_Utils.update(
				gb,
				{
					date: _user$project$Gameboard$Autumn(_p13._0)
				}));
	} else {
		return _user$project$Gameboard$freshBuildPhase(
			_elm_lang$core$Native_Utils.update(
				gb,
				{
					date: _user$project$Gameboard$Spring(_p13._0 + 1)
				}));
	}
};
var _user$project$Gameboard$nextPhase = function (gb) {
	var _p14 = gb.phase;
	switch (_p14.ctor) {
		case 'Build':
			return _user$project$Gameboard$freshMovePhase(
				A2(_user$project$Gameboard$applyBuildDirectives, _p14._0, gb));
		case 'Move':
			return _user$project$Gameboard$freshRetreatPhase(
				A2(_user$project$Gameboard$applyMoveDirectives, _p14._0, gb));
		default:
			return _user$project$Gameboard$turnTheClock(
				A2(_user$project$Gameboard$applyRetreats, _p14._0, gb));
	}
};
var _user$project$Gameboard$nextTurn = function (gb) {
	var _p15 = _elm_lang$core$Debug$log('Gameboard.nextTurn');
	var _p16 = gb.turn;
	if (_p16.ctor === '[]') {
		return _elm_lang$core$Native_Utils.crashCase(
			'Gameboard',
			{
				start: {line: 118, column: 9},
				end: {line: 121, column: 39}
			},
			_p16)('no empires??');
	} else {
		if (_p16._1.ctor === '[]') {
			return _user$project$Gameboard$nextPhase(gb);
		} else {
			return _elm_lang$core$Native_Utils.update(
				gb,
				{turn: _p16._1});
		}
	}
};
var _user$project$Gameboard$Convoy = function (a) {
	return {ctor: 'Convoy', _0: a};
};
var _user$project$Gameboard$Support = function (a) {
	return {ctor: 'Support', _0: a};
};
var _user$project$Gameboard$Advance = function (a) {
	return {ctor: 'Advance', _0: a};
};
var _user$project$Gameboard$Hold = {ctor: 'Hold'};
