var _user$project$GameMap$getEmpireString = function (_p0) {
	var _p1 = _p0;
	return _p1._0;
};
var _user$project$GameMap$crashIfNothing = function (ma) {
	var _p2 = ma;
	if (_p2.ctor === 'Just') {
		return _p2._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'GameMap',
			{
				start: {line: 154, column: 5},
				end: {line: 156, column: 50}
			},
			_p2)('Crash if Nothing');
	}
};
var _user$project$GameMap$provinceIDtoString = function (pid) {
	var _p4 = pid;
	if (_p4.ctor === 'Capital') {
		return _p4._0._0;
	} else {
		return _p4._0;
	}
};
var _user$project$GameMap$getLocations = F2(
	function (gm, pid) {
		return A2(
			_elm_lang$core$List$filter,
			function (loc) {
				return _elm_lang$core$Native_Utils.eq(loc.pid, pid);
			},
			gm);
	});
var _user$project$GameMap$getLocation = F2(
	function (gm, lid) {
		var _p5 = _elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$filter,
				function (loc) {
					return _elm_lang$core$Native_Utils.eq(loc.lid, lid);
				},
				gm));
		if (_p5.ctor === 'Nothing') {
			return _elm_lang$core$Native_Utils.crashCase(
				'GameMap',
				{
					start: {line: 68, column: 5},
					end: {line: 70, column: 24}
				},
				_p5)('LocationID not found');
		} else {
			return _p5._0;
		}
	});
var _user$project$GameMap$getProvinceID = F2(
	function (gm, lid) {
		var location = A2(_user$project$GameMap$getLocation, gm, lid);
		return location.pid;
	});
var _user$project$GameMap$isCapital = F2(
	function (gm, lid) {
		var province = A2(_user$project$GameMap$getProvinceID, gm, lid);
		var _p7 = province;
		if (_p7.ctor === 'Capital') {
			return true;
		} else {
			return false;
		}
	});
var _user$project$GameMap$getNaturalOwner = F2(
	function (gm, lid) {
		var location = A2(_user$project$GameMap$getLocation, gm, lid);
		return location.empire;
	});
var _user$project$GameMap$getAdjacencies = F2(
	function (gm, lid) {
		var location = A2(_user$project$GameMap$getLocation, gm, lid);
		return location.adjancies;
	});
var _user$project$GameMap$getPieceInfo = function (piece) {
	var _p8 = piece;
	if (_p8.ctor === 'Army') {
		return _p8._0;
	} else {
		return _p8._0;
	}
};
var _user$project$GameMap$getMoves = F2(
	function (gm, p) {
		return A2(
			_user$project$GameMap$getAdjacencies,
			gm,
			_user$project$GameMap$getPieceInfo(p).location);
	});
var _user$project$GameMap$canMove = F3(
	function (gm, p, lid) {
		return A2(
			_elm_lang$core$List$member,
			lid,
			A2(
				_user$project$GameMap$getAdjacencies,
				gm,
				_user$project$GameMap$getPieceInfo(p).location));
	});
var _user$project$GameMap$PieceInfo = F2(
	function (a, b) {
		return {empire: a, location: b};
	});
var _user$project$GameMap$Location = F4(
	function (a, b, c, d) {
		return {lid: a, empire: b, pid: c, adjancies: d};
	});
var _user$project$GameMap$Empire = function (a) {
	return {ctor: 'Empire', _0: a};
};
var _user$project$GameMap$getEmpireTurnOrder = function (_p9) {
	return A2(
		_elm_lang$core$List$map,
		_user$project$GameMap$Empire,
		function (_) {
			return _.turnOrder;
		}(_p9));
};
var _user$project$GameMap$Fleet = function (a) {
	return {ctor: 'Fleet', _0: a};
};
var _user$project$GameMap$Army = function (a) {
	return {ctor: 'Army', _0: a};
};
var _user$project$GameMap$Land = function (a) {
	return {ctor: 'Land', _0: a};
};
var _user$project$GameMap$Sea = function (a) {
	return {ctor: 'Sea', _0: a};
};
var _user$project$GameMap$Coast = function (a) {
	return {ctor: 'Coast', _0: a};
};
var _user$project$GameMap$convertLocationID = function (_p10) {
	var _p11 = _p10;
	var _p13 = _p11._0;
	var _p12 = _p11._1;
	switch (_p12.ctor) {
		case 'Coast':
			if (_p12._0 === '') {
				return _user$project$GameMap$Coast(_p13);
			} else {
				return _user$project$GameMap$Coast(
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p13,
						A2(_elm_lang$core$Basics_ops['++'], ' ', _p12._0)));
			}
		case 'Land':
			return _user$project$GameMap$Land(_p13);
		default:
			return _user$project$GameMap$Sea(_p13);
	}
};
var _user$project$GameMap$convertAdjacencies = function (adj) {
	return A2(_elm_lang$core$List$map, _user$project$GameMap$convertLocationID, adj);
};
var _user$project$GameMap$newLocation = F2(
	function (pid, _p14) {
		var _p15 = _p14;
		return {
			lid: _user$project$GameMap$convertLocationID(
				{
					ctor: '_Tuple2',
					_0: _user$project$GameMap$provinceIDtoString(pid),
					_1: _p15._0
				}),
			empire: _elm_lang$core$Maybe$Nothing,
			pid: pid,
			adjancies: _user$project$GameMap$convertAdjacencies(_p15._1)
		};
	});
var _user$project$GameMap$convertPiece = F2(
	function (gm, piece) {
		var locID = _user$project$GameMap$convertLocationID(piece);
		var empire = _user$project$GameMap$crashIfNothing(
			A2(_user$project$GameMap$getNaturalOwner, gm, locID));
		var pieceInfo = {empire: empire, location: locID};
		var _p16 = locID;
		switch (_p16.ctor) {
			case 'Land':
				return _user$project$GameMap$Army(pieceInfo);
			case 'Coast':
				return _user$project$GameMap$Fleet(pieceInfo);
			default:
				return _user$project$GameMap$Fleet(pieceInfo);
		}
	});
var _user$project$GameMap$getStartingPieces = F2(
	function (gm, gmd) {
		return A2(
			_elm_lang$core$List$map,
			_user$project$GameMap$convertPiece(gm),
			gmd.startingPieces);
	});
var _user$project$GameMap$Noncapital = function (a) {
	return {ctor: 'Noncapital', _0: a};
};
var _user$project$GameMap$Capital = function (a) {
	return {ctor: 'Capital', _0: a};
};
var _user$project$GameMap$SupplyCenter = function (a) {
	return {ctor: 'SupplyCenter', _0: a};
};
var _user$project$GameMap$processProvinceData = function (pdata) {
	var _p17 = pdata;
	if (_p17.ctor === 'Capital') {
		return A2(
			_elm_lang$core$List$map,
			_user$project$GameMap$newLocation(
				_user$project$GameMap$Capital(
					_user$project$GameMap$SupplyCenter(_p17._0._0))),
			_p17._0._1);
	} else {
		return A2(
			_elm_lang$core$List$map,
			_user$project$GameMap$newLocation(
				_user$project$GameMap$Noncapital(_p17._0._0)),
			_p17._0._1);
	}
};
var _user$project$GameMap$processEmpire = function (_p18) {
	var _p19 = _p18;
	var locations = _elm_lang$core$List$concat(
		A2(_elm_lang$core$List$map, _user$project$GameMap$processProvinceData, _p19._1));
	return A2(
		_elm_lang$core$List$map,
		function (loc) {
			return _elm_lang$core$Native_Utils.update(
				loc,
				{
					empire: A2(_elm_lang$core$Maybe$map, _user$project$GameMap$Empire, _p19._0)
				});
		},
		locations);
};
var _user$project$GameMap$convert = function (gmd) {
	return _elm_lang$core$List$concat(
		A2(_elm_lang$core$List$map, _user$project$GameMap$processEmpire, gmd.mapData));
};
