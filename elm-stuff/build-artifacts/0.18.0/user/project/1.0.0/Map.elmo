var _user$project$Map$asList = function (_p0) {
	var _p1 = _p0;
	return _p1._0;
};
var _user$project$Map$M = function (a) {
	return {ctor: 'M', _0: a};
};
var _user$project$Map$empty = _user$project$Map$M(
	{ctor: '[]'});
var _user$project$Map$get = F2(
	function (k, _p2) {
		get:
		while (true) {
			var _p3 = _p2;
			var _p4 = _p3._0;
			if (_p4.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_elm_lang$core$Native_Utils.eq(k, _p4._0._0)) {
					return _elm_lang$core$Maybe$Just(_p4._0._1);
				} else {
					var _v3 = k,
						_v4 = _user$project$Map$M(_p4._1);
					k = _v3;
					_p2 = _v4;
					continue get;
				}
			}
		}
	});
var _user$project$Map$set = F3(
	function (k, v, _p5) {
		var _p6 = _p5;
		var _p9 = _p6._0;
		var _p7 = _p9;
		if (_p7.ctor === '[]') {
			return _user$project$Map$M(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: k, _1: v},
					_1: {ctor: '[]'}
				});
		} else {
			var _p8 = _p7._0._0;
			if (_elm_lang$core$Native_Utils.eq(k, _p8)) {
				return _user$project$Map$M(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p8, _1: v},
						_1: _p9
					});
			} else {
				var kvs = _user$project$Map$asList(
					A3(
						_user$project$Map$set,
						k,
						v,
						_user$project$Map$M(_p7._1)));
				return _user$project$Map$M(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p8, _1: _p7._0._1},
						_1: kvs
					});
			}
		}
	});
var _user$project$Map$fromList = function (kvs) {
	var _p10 = kvs;
	if (_p10.ctor === '[]') {
		return _user$project$Map$M(
			{ctor: '[]'});
	} else {
		return A3(
			_user$project$Map$set,
			_p10._0._0,
			_p10._0._1,
			_user$project$Map$fromList(_p10._1));
	}
};
